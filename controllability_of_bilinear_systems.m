%% under review, limitted access
% Code of paper "Deformable object shape
% trajectory control with data-driven Koopman and bilinear models", by I. Cuiral-Zueco
% This code contains the matlab implementation of the mathematica code in table 2.2 from:
%Elliott, D. L. (2009). Bilinear control systems: 
% matrices in action. (Vol. 169). Springer.

%As an example it provides controllability analysis for the bilinear model matrices
%obtained for eperiment 3 of the paper

%% First case example: both robots are being used with 2 translation and 1 rotation DoF each
close all; clear all;
load('BmatricesExp3.mat');

gen = {B(:,:,1),B(:,:,2),B(:,:,3),B(:,:,4),B(:,:,5),B(:,:,6)};

n =  size(cell2mat(gen(1)),1);
LieAlgebraBasis = LieTree(gen, n);
N=size(LieAlgebraBasis,2);

disp(['CASE 1: 2 working robots ']);
disp(['Dimension of the underlying Euclidean space: ',num2str(n)]);
disp(['Basis size of the Lie algebra: ',num2str(N)]);

if n^2==N || n^2==(N-1)
    % Transitivity condition II.1 from Table 1 in
    %W. M. Boothby and E.N. Wilson. Determination of the transitivity of
    %bilinear systems. SIAM journal on control and optimization, 17(2):212â€“
    %221, 1979.
    % Some other conditions might hold in other systems, but we found this
    % one to be satisfied by our system
    disp(['Controllable with condition n^2=N+e (e= 0 or 1)']);
end
%% Second case example: same as case 1 but robot 1 "breaks" (we eliminate matrices B_1 to B_3)

gen = {B(:,:,4),B(:,:,5),B(:,:,6)};

n =  size(cell2mat(gen(1)),1);
LieAlgebraBasis = LieTree(gen, n);
N=size(LieAlgebraBasis,2);

disp(['CASE 2: ']);
disp(['Dimension of the underlying Euclidean space: ',num2str(n)]);
disp(['Basis size of the Lie algebra: ',num2str(N)]);

if n^2==N || n^2==(N-1)
    disp(['Controllable with condition n^2=N+e (e= 0 or 1)']);
else
    disp(['We cannot ensure controllability through condition n^2=N+e (e= 0 or 1)']);
end

%% functions
function LieAlgebraBasis = LieTree(gen, n)
    % LieTree computes the basis of the Lie algebra generated by gen
    % gen is a list of n x n matrices
    % n is the dimension of the matrices

    nu = n^2;
    m = length(gen);
    r = Dim(gen);
    
    if r < m
        error('Dependent list');
    end
    
    Basis = gen;
    tree = cell(1, nu);
    tree{1} = gen;
    
    for i = 2:nu
        L = tree{i-1};
        Lm = length(L);
        db = Dim(Basis);
        newLevel = {};
        
        for j = 1:m
            for k = 1:Lm
                G = gen{j};
                com = liebracket(G, L{k});
                trial = [Basis, {com}];
                newdb = Dim(trial);
                
                if newdb > db
                    newLevel = [newLevel, {com}];
                    Basis = [Basis, {com}];
                    db = newdb;
                end
            end
        end
        
        tree{i} = newLevel;
        if isempty(newLevel)
            break;
        end
    end
    
    LieAlgebraBasis = Basis;
end

function C = liebracket(A, B)
    % Calculate the Lie bracket of A and B
    C = A * B - B * A;
end

function d = Dim(L)
    % Calculate the dimension of the span of the list of matrices L
    M = [];
    for i = 1:length(L)
        M = [M, reshape(L{i}, [], 1)];
    end
    d = rank(M);
end
